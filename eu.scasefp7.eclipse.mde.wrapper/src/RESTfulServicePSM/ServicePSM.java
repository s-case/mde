/**
 */
package RESTfulServicePSM;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Service PSM</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * </p>
 * <ul>
 *   <li>{@link RESTfulServicePSM.ServicePSM#getHasJavaRModel <em>Has Java RModel</em>}</li>
 *   <li>{@link RESTfulServicePSM.ServicePSM#getHasJavaRController <em>Has Java RController</em>}</li>
 *   <li>{@link RESTfulServicePSM.ServicePSM#getHasJavaRCManager <em>Has Java RC Manager</em>}</li>
 *   <li>{@link RESTfulServicePSM.ServicePSM#getHasJavaRMManager <em>Has Java RM Manager</em>}</li>
 *   <li>{@link RESTfulServicePSM.ServicePSM#getHasJavaAlgoModel <em>Has Java Algo Model</em>}</li>
 *   <li>{@link RESTfulServicePSM.ServicePSM#getHasJavaAlgoController <em>Has Java Algo Controller</em>}</li>
 *   <li>{@link RESTfulServicePSM.ServicePSM#getHasHibernateController <em>Has Hibernate Controller</em>}</li>
 *   <li>{@link RESTfulServicePSM.ServicePSM#getName <em>Name</em>}</li>
 *   <li>{@link RESTfulServicePSM.ServicePSM#getServiceOutputPath <em>Service Output Path</em>}</li>
 *   <li>{@link RESTfulServicePSM.ServicePSM#getServiceDatabaseIP <em>Service Database IP</em>}</li>
 *   <li>{@link RESTfulServicePSM.ServicePSM#getServiceDatabasePort <em>Service Database Port</em>}</li>
 *   <li>{@link RESTfulServicePSM.ServicePSM#getServiceDatabaseUsername <em>Service Database Username</em>}</li>
 *   <li>{@link RESTfulServicePSM.ServicePSM#getServiceDatabasePassword <em>Service Database Password</em>}</li>
 *   <li>{@link RESTfulServicePSM.ServicePSM#getServiceDatabaseType <em>Service Database Type</em>}</li>
 * </ul>
 *
 * @see RESTfulServicePSM.RESTfulServicePSMPackage#getServicePSM()
 * @model annotation="http://www.eclipse.org/emf/2002/Ecore constraints='allModelsHaveRResourcePropertiesWithProperHibernateAnnotations allModelsHavePResourcePropertiesWithProperHibernateAnnotations rMPropertiesSettersHaveProperXMLTransientAnnotation rMPropertiesHaveColumnAnnotation RControllerUniqueHTTPVerbsPerParent RCManagerHasUniqueHTTPActivityVerbsPerParent rCManagerPostActivityAddsGetHypermediaLinkToRRController rCManagerPostActivityAddsPutHypermediaLinkToRRController rCManagerPostActivityAddsDeleteHypermediaLinkToRRController rCManagerGetActivityAddsGetHypermediaLinkToRRController rCManagerGetActivityAddsPutHypermediaLinkToRRController rCManagerGetActivityAddsDeleteHypermediaLinkToRRController rCManagerPostActivityAddsGetHypermediaLinkToParentRController rCManagerPostActivityAddsPutHypermediaLinkToParentRController rCManagerPostActivityAddsDeleteHypermediaLinkToParentRController rCManagerGetActivityAddsGetHypermediaLinkToParentRController rCManagerGetActivityAddsPutHypermediaLinkToParentRController rCManagerGetActivityAddsDeleteHypermediaLinkToParentRController rControllerGetActivityAddsPostHypermediaLinkToRCManager rControllerGetActivityAddsGetHypermediaLinkToRCManager rControllerPutActivityAddsPostHypermediaLinkToRCManager rControllerPutActivityAddsGetHypermediaLinkToRCManager rControllerGetActivityAddsPostHypermediaLinkToParentRCManager rControllerGetActivityAddsGetHypermediaLinkToParentRCManager rControllerPutActivityAddsPostHypermediaLinkToParentRCManager rControllerPutActivityAddsGetHypermediaLinkToParentRCManager rControllerDeleteActivityAddsPostHypermediaLinkToParentRCManager rControllerDeleteActivityAddsGetHypermediaLinkToParentRCManager algoControllerActivityAddsHypermediaLinkToRAlgoController algoControllerAddsHypermediaLinkToParentAlgoController rControllerGetAddsHypermediaLinkToRAlgoController rControllerPutAddsHypermediaLinkToRAlgoController algoControllerAddsGetHypermediaLinkToParentRController algoControllerAddsPutHypermediaLinkToParentRController algoControllerAddsDeleteHypermediaLinkToParentRController'"
 *        annotation="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot allModelsHaveRResourcePropertiesWithProperHibernateAnnotations='\n\t\tself.hasJavaRModel->forAll(JavaRModel | JavaRModel.hasRelatedJavaRMManager.hasRelatedJavaRModel->forAll(RelatedJavaRModel | \n\t\t\tJavaRModel.JavaRModelHasProperty->one(name = \'SetOf\' + RelatedJavaRModel.name)\n\t\t\tand\n\t\t\tJavaRModel.JavaRModelHasProperty->select(name = \'SetOf\' + RelatedJavaRModel.name)->forAll(JRModelProperty | \n\t\t\t\tJRModelProperty.PropertyHasHibernateAnnotation->one(HibernateAnnotationText = \'@OneToMany(fetch = FetchType.EAGER, mappedBy=\"\' + JavaRModel.parentName + \'\",orphanRemoval=true)\')\n\t\t\t\tand\n\t\t\t\tJRModelProperty.PropertyHasHibernateAnnotation->one(HibernateAnnotationText = \'@OnDelete(action=OnDeleteAction.CASCADE)\')\n\t\t\t)\n\t\t))' allModelsHavePResourcePropertiesWithProperHibernateAnnotations='\n\t\tself.hasJavaRModel->forAll(JavaRModel | \n\t\t\tself.hasJavaRModel->select(ParentJRModel | ParentJRModel.hasRelatedJavaRMManager->exists(JRMManager | JRMManager.hasRelatedJavaRModel = JavaRModel))\n\t\t\t->forAll(ParentJRModel | JavaRModel.JavaRModelHasProperty->one(name = ParentJRModel.parentName)\n\t\t\t\tand\n\t\t\t\tJavaRModel.JavaRModelHasProperty->forAll( Property |\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\t(Property.name = ParentJRModel.parentName)\n\t\t\t\t\t\t\timplies\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\tProperty.PropertyHasHibernateAnnotation->one(HibernateAnnotationText = \'@ManyToOne(fetch = FetchType.EAGER)\')\n\t\t\t\t\t\t\t\tand\n\t\t\t\t\t\t\t\tProperty.PropertyHasHibernateAnnotation->one(HibernateAnnotationText = \'@JoinColumn(name=\"\' + if JavaRModel = ParentJRModel then \'sourse\' else \'\' endif + ParentJRModel.JavaRModelHasProperty->select(bIsPrimaryIdentifier = true)->at(1).name + \'\")\')\n\t\t\t\t\t\t\t\tand\n\t\t\t\t\t\t\t\tProperty.PropertyHasHibernateAnnotation->one(HibernateAnnotationText = \'@ForeignKey(name = \"fk_\' + ParentJRModel.parentName + \'_\' + JavaRModel.parentName + \'\")\')\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t\tand\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\tProperty.PropertyHasHibernateAnnotation->one(HibernateAnnotationText = \'@ManyToOne(fetch = FetchType.EAGER)\')\n\t\t\t\t\t\t\t\tand\n\t\t\t\t\t\t\t\tProperty.PropertyHasHibernateAnnotation->one(HibernateAnnotationText = \'@JoinColumn(name=\"\' + if JavaRModel = ParentJRModel then \'sourse\' else \'\' endif + ParentJRModel.JavaRModelHasProperty->select(bIsPrimaryIdentifier = true)->at(1).name + \'\")\')\n\t\t\t\t\t\t\t\tand\n\t\t\t\t\t\t\t\tProperty.PropertyHasHibernateAnnotation->one(HibernateAnnotationText = \'@ForeignKey(name = \"fk_\' + ParentJRModel.parentName + \'_\' + JavaRModel.parentName + \'\")\')\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\timplies\n\t\t\t\t\t\t\t(Property.name = ParentJRModel.parentName)\n\t\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t)' rMPropertiesSettersHaveProperXMLTransientAnnotation='\n\t\t\tlet AllResourceModels : Sequence(JavaResourceModel) = self.hasJavaRModel in\n\t\t\tself.hasJavaRModel->forAll(JRModel | \n\t\t\t\tJRModel.JavaRModelHasSetter->select(SetterFunction | \n\t\t\t\t\t(\n\t\t\t\t\t\tJRModel.hasRelatedJavaRMManager.hasRelatedJavaRModel->exists(JRRModel | SetterFunction.name = \'setSetOf\' + JRRModel.name)\n\t\t\t\t\t)\n\t\t\t\t\tor\n\t\t\t\t\t(\n\t\t\t\t\t\tAllResourceModels->select(hasRelatedJavaRMManager->exists(hasRelatedJavaRModel = JRModel))\n\t\t\t\t\t\t\t->exists(ParentJRModel | SetterFunction.name = \'set\' + ParentJRModel.parentName)\n\t\t\t\t\t)\t\n\t\t\t\t)->forAll(SetterFunction | SetterFunction.SetterFunctionHasJAXBAnnotation->one(\'@XmlTransient\'))\n\t\t\t)' rMPropertiesHaveColumnAnnotation='\n\t\t\tself.hasJavaRModel->forAll(JRModel |\n\t\t\t\tJRModel.JavaRModelHasProperty->reject(Property |\n\t\t\t\t\t(Property.name = \'linklist\')\n\t\t\t\t\tor\n\t\t\t\t\t(JRModel.hasRelatedJavaRMManager->exists(JRRModel | Property.name = \'SetOf\' + JRRModel.name))\n\t\t\t\t\tor\n\t\t\t\t\t(self.hasJavaRModel->select(JPRModel | JPRModel.hasRelatedJavaRMManager.hasRelatedJavaRModel->exists(JPRModel | JPRModel = JRModel))->exists(JPRModel | Property.name = JPRModel.parentName))\n\t\t\t\t)->forAll(Property | Property.PropertyHasHibernateAnnotation->one(HibernateAnnotationText = \'@Column(name = \"\' + Property.name + \'\")\'))\n\t\t\t)' RControllerUniqueHTTPVerbsPerParent='\n\t\t\tlet AllResourceModels : Sequence(JavaResourceModel) = self.hasJavaRModel in\n\t\t\tself.hasJavaRController->forAll(JRController | let numberOfParents : Integer = AllResourceModels->select(ParentRModel | \n\t\t\t\tParentRModel.hasRelatedJavaRMManager->exists(JRMManager | JRController.hasAssociatedJavaRModel = JRMManager.hasRelatedJavaRModel))->size() in\n\t\t\t\tJRController.JavaRControllerHasHTTPActivity->select(HTTPActivity | HTTPActivity.ActivityHTTPVerb = 1)->size() <= numberOfParents\n\t\t\t\tand\n\t\t\t\tJRController.JavaRControllerHasHTTPActivity->select(HTTPActivity | HTTPActivity.ActivityHTTPVerb = 2)->size() <= numberOfParents\n\t\t\t\tand\n\t\t\t\tJRController.JavaRControllerHasHTTPActivity->select(HTTPActivity | HTTPActivity.ActivityHTTPVerb = 3)->size() <= numberOfParents\n\t\t\t\tand\n\t\t\t\tJRController.JavaRControllerHasHTTPActivity->select(HTTPActivity | HTTPActivity.ActivityHTTPVerb = 1)->isUnique(name)\n\t\t\t\tand\n\t\t\t\tJRController.JavaRControllerHasHTTPActivity->select(HTTPActivity | HTTPActivity.ActivityHTTPVerb = 1)->isUnique(name)\n\t\t\t\tand\n\t\t\t\tJRController.JavaRControllerHasHTTPActivity->select(HTTPActivity | HTTPActivity.ActivityHTTPVerb = 1)->isUnique(name)\n\t\t\t\t)' RCManagerHasUniqueHTTPActivityVerbsPerParent='\n\t\t\tlet AllResourceModels : Sequence(JavaResourceModel) = self.hasJavaRModel in\n\t\t\tself.hasJavaRCManager->forAll(JRCManager | let numberOfParents : Integer = AllResourceModels->select(ParentRModel |\n\t\t\t\tParentRModel->exists(hasRelatedJavaRMManager = JRCManager))->size() in\n\t\t\t\tJRCManager.JavaRCManagerHasHTTPActivity->select(HTTPActivity | HTTPActivity.ActivityHTTPVerb = 0)->size() = numberOfParents\n\t\t\t\tand\n\t\t\t\tJRCManager.JavaRCManagerHasHTTPActivity->select(HTTPActivity | HTTPActivity.ActivityHTTPVerb = 1)->size() = numberOfParents\n\t\t\t\tand\n\t\t\t\tJRCManager.JavaRCManagerHasHTTPActivity->select(HTTPActivity | HTTPActivity.ActivityHTTPVerb = 0)->isUnique(name)\n\t\t\t\tand\n\t\t\t\tJRCManager.JavaRCManagerHasHTTPActivity->select(HTTPActivity | HTTPActivity.ActivityHTTPVerb = 1)->isUnique(name)\t\t\t\t\n\t\t\t\t)' rCManagerPostActivityAddsGetHypermediaLinkToRRController='\n\t\tself.hasJavaRCManager->forAll(JRCManager | \n\t\tself.hasJavaRController->forAll( JRController | \n\t\t\t(\n\t\t\t\t(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)\n\t\t\t\timplies \n\t\t\t\tJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Child\' and  hasTargetJavaRController = JRController)\n\t\t\t)\n\t\t    and \n\t\t\t(\n\t\t\t\tJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Child\' and  hasTargetJavaRController = JRController)\n\t\t\t\timplies\n\t\t\t\t(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)\n\t\t\t)\n\t\t))' rCManagerPostActivityAddsPutHypermediaLinkToRRController='\n\t\tself.hasJavaRCManager->forAll(JRCManager | \n\t\tself.hasJavaRController->forAll( JRController | \n\t\t\t(\n\t\t\t\t(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)\n\t\t\t\timplies \n\t\t\t\tJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = \'Child\' and  hasTargetJavaRController = JRController)\n\t\t\t)\n\t\t    and \n\t\t\t(\n\t\t\t\tJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = \'Child\' and  hasTargetJavaRController = JRController)\n\t\t\t\timplies\n\t\t\t\t(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)\n\t\t\t)\n\t\t))' rCManagerPostActivityAddsDeleteHypermediaLinkToRRController='\n\t\tself.hasJavaRCManager->forAll(JRCManager | \n\t\tself.hasJavaRController->forAll( JRController | \n\t\t\t(\n\t\t\t\t(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)\n\t\t\t\timplies \n\t\t\t\tJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = \'Child\' and  hasTargetJavaRController = JRController)\n\t\t\t)\n\t\t    and \n\t\t\t(\n\t\t\t\tJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = \'Child\' and  hasTargetJavaRController = JRController)\n\t\t\t\timplies\n\t\t\t\t(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)\n\t\t\t)\n\t\t))' rCManagerGetActivityAddsGetHypermediaLinkToRRController='\n\t\tself.hasJavaRCManager->forAll(JRCManager | \n\t\tself.hasJavaRController->forAll( JRController | \n\t\t\t(\n\t\t\t\t(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)\n\t\t\t\timplies \n\t\t\t\tJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Child\' and  hasTargetJavaRController = JRController)\n\t\t\t)\n\t\t    and \n\t\t\t(\n\t\t\t\tJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Child\' and  hasTargetJavaRController = JRController)\n\t\t\t\timplies\n\t\t\t\t(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)\n\t\t\t)\n\t\t))' rCManagerGetActivityAddsPutHypermediaLinkToRRController='\n\t\tself.hasJavaRCManager->forAll(JRCManager | \n\t\tself.hasJavaRController->forAll( JRController | \n\t\t\t(\n\t\t\t\t(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)\n\t\t\t\timplies \n\t\t\t\tJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = \'Child\' and  hasTargetJavaRController = JRController)\n\t\t\t)\n\t\t    and \n\t\t\t(\n\t\t\t\tJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = \'Child\' and  hasTargetJavaRController = JRController)\n\t\t\t\timplies\n\t\t\t\t(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)\n\t\t\t)\n\t\t))' rCManagerGetActivityAddsDeleteHypermediaLinkToRRController='\n\t\tself.hasJavaRCManager->forAll(JRCManager | \n\t\tself.hasJavaRController->forAll( JRController | \n\t\t\t(\n\t\t\t\t(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)\n\t\t\t\timplies \n\t\t\t\tJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = \'Child\' and  hasTargetJavaRController = JRController)\n\t\t\t)\n\t\t    and \n\t\t\t(\n\t\t\t\tJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = \'Child\' and  hasTargetJavaRController = JRController)\n\t\t\t\timplies\n\t\t\t\t(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)\n\t\t\t)\n\t\t))' rCManagerPostActivityAddsGetHypermediaLinkToParentRController='\n\t\tself.hasJavaRCManager->forAll(JRCManager |\n\t\tself.hasJavaRController->forAll(JRController |\n\t\t\t(\n\t\t\t\t(JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)\n\t\t\t\timplies\n\t\t\t\tJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Parent\' and hasTargetJavaRController = JRController)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\tJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Parent\' and hasTargetJavaRController = JRController)\n\t\t\t\timplies\n\t\t\t\t(JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)\n\t\t\t)\n\t\t))' rCManagerPostActivityAddsPutHypermediaLinkToParentRController='\n\t\tself.hasJavaRCManager->forAll(JRCManager |\n\t\tself.hasJavaRController->forAll(JRController |\n\t\t\t(\n\t\t\t\t(JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)\n\t\t\t\timplies\n\t\t\t\tJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = \'Parent\' and hasTargetJavaRController = JRController)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\tJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = \'Parent\' and hasTargetJavaRController = JRController)\n\t\t\t\timplies\n\t\t\t\t(JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)\n\t\t\t)\n\t\t))' rCManagerPostActivityAddsDeleteHypermediaLinkToParentRController='\n\t\tself.hasJavaRCManager->forAll(JRCManager |\n\t\tself.hasJavaRController->forAll(JRController |\n\t\t\t(\n\t\t\t\t(JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)\n\t\t\t\timplies\n\t\t\t\tJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = \'Parent\' and hasTargetJavaRController = JRController)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\tJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = \'Parent\' and hasTargetJavaRController = JRController)\n\t\t\t\timplies\n\t\t\t\t(JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)\n\t\t\t)\n\t\t))' rCManagerGetActivityAddsGetHypermediaLinkToParentRController='\n\t\tself.hasJavaRCManager->forAll(JRCManager |\n\t\tself.hasJavaRController->forAll(JRController |\n\t\t\t(\n\t\t\t\t(JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)\n\t\t\t\timplies\n\t\t\t\tJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Parent\' and hasTargetJavaRController = JRController)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\tJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Parent\' and hasTargetJavaRController = JRController)\n\t\t\t\timplies\n\t\t\t\t(JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)\n\t\t\t)\n\t\t))' rCManagerGetActivityAddsPutHypermediaLinkToParentRController='\n\t\tself.hasJavaRCManager->forAll(JRCManager |\n\t\tself.hasJavaRController->forAll(JRController |\n\t\t\t(\n\t\t\t\t(JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)\n\t\t\t\timplies\n\t\t\t\tJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = \'Parent\' and hasTargetJavaRController = JRController)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\tJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = \'Parent\' and hasTargetJavaRController = JRController)\n\t\t\t\timplies\n\t\t\t\t(JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)\n\t\t\t)\n\t\t))' rCManagerGetActivityAddsDeleteHypermediaLinkToParentRController='\n\t\tself.hasJavaRCManager->forAll(JRCManager |\n\t\tself.hasJavaRController->forAll(JRController |\n\t\t\t(\n\t\t\t\t(JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)\n\t\t\t\timplies\n\t\t\t\tJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = \'Parent\' and hasTargetJavaRController = JRController)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\tJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = \'Parent\' and hasTargetJavaRController = JRController)\n\t\t\t\timplies\n\t\t\t\t(JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)\n\t\t\t)\n\t\t))' rControllerGetActivityAddsPostHypermediaLinkToRCManager='\n\t\tself.hasJavaRController->forAll( JRController |\n\t\tself.hasJavaRCManager->forAll( JRCManager |\n\t\t\t(\n\t\t\t\tJRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)\n\t\t\t\timplies\n\t\t\t\tJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = \'Child\' and hasTargetRCManager = JRCManager)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\tJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = \'Child\' and hasTargetRCManager = JRCManager)\n\t\t\t\timplies\n\t\t\t\tJRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)\n\t\t\t)\n\t\t))' rControllerGetActivityAddsGetHypermediaLinkToRCManager='\n\t\tself.hasJavaRController->forAll( JRController |\n\t\tself.hasJavaRCManager->forAll( JRCManager |\n\t\t\t(\n\t\t\t\tJRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)\n\t\t\t\timplies\n\t\t\t\tJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Child\' and hasTargetRCManager = JRCManager)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\tJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Child\' and hasTargetRCManager = JRCManager)\n\t\t\t\timplies\n\t\t\t\tJRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)\n\t\t\t)\n\t\t))' rControllerPutActivityAddsPostHypermediaLinkToRCManager='\n\t\tself.hasJavaRController->forAll( JRController |\n\t\tself.hasJavaRCManager->forAll( JRCManager |\n\t\t\t(\n\t\t\t\tJRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)\n\t\t\t\timplies\n\t\t\t\tJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = \'Child\' and hasTargetRCManager = JRCManager)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\tJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = \'Child\' and hasTargetRCManager = JRCManager)\n\t\t\t\timplies\n\t\t\t\tJRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)\n\t\t\t)\n\t\t))' rControllerPutActivityAddsGetHypermediaLinkToRCManager='\n\t\tself.hasJavaRController->forAll( JRController |\n\t\tself.hasJavaRCManager->forAll( JRCManager |\n\t\t\t(\n\t\t\t\tJRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)\n\t\t\t\timplies\n\t\t\t\tJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Child\' and hasTargetRCManager = JRCManager)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\tJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Child\' and hasTargetRCManager = JRCManager)\n\t\t\t\timplies\n\t\t\t\tJRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)\n\t\t\t)\n\t\t))' rControllerGetActivityAddsPostHypermediaLinkToParentRCManager='\n\t\tself.hasJavaRController->forAll( JRController |\n\t\tself.hasJavaRCManager->forAll( JRCManager |\n\t\t\t(\n\t\t\t\tJRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)\n\t\t\t\timplies\n\t\t\t\tJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = \'Parent\' and hasTargetRCManager = JRCManager)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\tJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = \'Parent\' and hasTargetRCManager = JRCManager)\n\t\t\t\timplies\n\t\t\t\tJRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)\t\t\t\t\t\t\n\t\t\t)\n\t\t))' rControllerGetActivityAddsGetHypermediaLinkToParentRCManager='\n\t\tself.hasJavaRController->forAll( JRController |\n\t\tself.hasJavaRCManager->forAll( JRCManager |\n\t\t\t(\n\t\t\t\tJRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)\n\t\t\t\timplies\n\t\t\t\tJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Parent\' and hasTargetRCManager = JRCManager)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\tJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Parent\' and hasTargetRCManager = JRCManager)\n\t\t\t\timplies\n\t\t\t\tJRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)\t\t\t\t\t\t\n\t\t\t)\n\t\t))' rControllerPutActivityAddsPostHypermediaLinkToParentRCManager='\n\t\tself.hasJavaRController->forAll( JRController |\n\t\tself.hasJavaRCManager->forAll( JRCManager |\n\t\t\t(\n\t\t\t\tJRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)\n\t\t\t\timplies\n\t\t\t\tJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = \'Parent\' and hasTargetRCManager = JRCManager)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\tJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = \'Parent\' and hasTargetRCManager = JRCManager)\n\t\t\t\timplies\n\t\t\t\tJRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)\t\t\t\t\t\t\n\t\t\t)\n\t\t))' rControllerPutActivityAddsGetHypermediaLinkToParentRCManager='\n\t\tself.hasJavaRController->forAll( JRController |\n\t\tself.hasJavaRCManager->forAll( JRCManager |\n\t\t\t(\n\t\t\t\tJRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)\n\t\t\t\timplies\n\t\t\t\tJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Parent\' and hasTargetRCManager = JRCManager)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\tJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Parent\' and hasTargetRCManager = JRCManager)\n\t\t\t\timplies\n\t\t\t\tJRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)\t\t\t\t\t\t\n\t\t\t)\n\t\t))' rControllerDeleteActivityAddsPostHypermediaLinkToParentRCManager='\n\t\tself.hasJavaRController->forAll( JRController |\n\t\tself.hasJavaRCManager->forAll( JRCManager |\n\t\t\t(\n\t\t\t\tJRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)\n\t\t\t\timplies\n\t\t\t\tJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 3).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = \'Parent\' and hasTargetRCManager = JRCManager)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\tJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 3).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = \'Parent\' and hasTargetRCManager = JRCManager)\n\t\t\t\timplies\n\t\t\t\tJRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)\t\t\t\t\t\t\n\t\t\t)\n\t\t))' rControllerDeleteActivityAddsGetHypermediaLinkToParentRCManager='\n\t\tself.hasJavaRController->forAll( JRController |\n\t\tself.hasJavaRCManager->forAll( JRCManager |\n\t\t\t(\n\t\t\t\tJRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)\n\t\t\t\timplies\n\t\t\t\tJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 3).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Parent\' and hasTargetRCManager = JRCManager)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\tJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 3).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Parent\' and hasTargetRCManager = JRCManager)\n\t\t\t\timplies\n\t\t\t\tJRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)\t\t\t\t\t\t\n\t\t\t)\n\t\t))' algoControllerActivityAddsHypermediaLinkToRAlgoController='\n\t\tself.hasJavaAlgoController->forAll(algoControllerA, algoControllerB |\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists( ActivityHTTPVerb = 0)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = \'Child\' and hasTargetJavaAlgoController = algoControllerB)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = \'Child\' and hasTargetJavaAlgoController = algoControllerB)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists( ActivityHTTPVerb = 0)\n\t\t\t\t)\n\t\t\t)\n\t\t\tor\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists( ActivityHTTPVerb = 1)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Child\' and hasTargetJavaAlgoController = algoControllerB)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Child\' and hasTargetJavaAlgoController = algoControllerB)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists( ActivityHTTPVerb = 1)\n\t\t\t\t)\n\t\t\t)\n\t\t\tor\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists( ActivityHTTPVerb = 0)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = \'Child\' and hasTargetJavaAlgoController = algoControllerB)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = \'Child\' and hasTargetJavaAlgoController = algoControllerB)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists( ActivityHTTPVerb = 0)\n\t\t\t\t)\n\t\t\t)\n\t\t\tor\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists( ActivityHTTPVerb = 1)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Child\' and hasTargetJavaAlgoController = algoControllerB)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Child\' and hasTargetJavaAlgoController = algoControllerB)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists( ActivityHTTPVerb = 1)\n\t\t\t\t)\n\t\t\t)\n\t\t)' algoControllerAddsHypermediaLinkToParentAlgoController='\n\t\tself.hasJavaAlgoController->forAll(algoControllerA, algoControllerB |\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = \'Parent\' and hasTargetJavaAlgoController = algoControllerB)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = \'Parent\' and hasTargetJavaAlgoController = algoControllerB)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)\n\t\t\t\t)\n\t\t\t)\n\t\t\tor\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Parent\' and hasTargetJavaAlgoController = algoControllerB)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Parent\' and hasTargetJavaAlgoController = algoControllerB)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)\n\t\t\t\t)\n\t\t\t)\n\t\t\tor\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = \'Parent\' and hasTargetJavaAlgoController = algoControllerB)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = \'Parent\' and hasTargetJavaAlgoController = algoControllerB)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)\n\t\t\t\t)\n\t\t\t)\n\t\t\tor\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Parent\' and hasTargetJavaAlgoController = algoControllerB)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Parent\' and hasTargetJavaAlgoController = algoControllerB)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)\n\t\t\t\t)\n\t\t\t)\n\t\t)' rControllerGetAddsHypermediaLinkToRAlgoController='\n\t\tself.hasJavaAlgoController->forAll(algoControllerA |\n\t\tself.hasJavaRController->forAll(rControllerA |\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\trControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)\n\t\t\t\t\timplies\n\t\t\t\t\trControllerA.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = \'Child\' and hasTargetJavaAlgoController = algoControllerA)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\trControllerA.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = \'Child\' and hasTargetJavaAlgoController = algoControllerA)\n\t\t\t\t\timplies\n\t\t\t\t\trControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)\n\t\t\t\t)\n\t\t\t)\n\t\t\tor\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\trControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)\n\t\t\t\t\timplies\n\t\t\t\t\trControllerA.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Child\' and hasTargetJavaAlgoController = algoControllerA)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\trControllerA.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Child\' and hasTargetJavaAlgoController = algoControllerA)\n\t\t\t\t\timplies\n\t\t\t\t\trControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)\n\t\t\t\t)\n\t\t\t)\n\t\t\n\t\t))' rControllerPutAddsHypermediaLinkToRAlgoController='\n\t\tself.hasJavaAlgoController->forAll(algoControllerA |\n\t\tself.hasJavaRController->forAll(rControllerA |\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\trControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)\n\t\t\t\t\timplies\n\t\t\t\t\trControllerA.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = \'Child\' and hasTargetJavaAlgoController = algoControllerA)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\trControllerA.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = \'Child\' and hasTargetJavaAlgoController = algoControllerA)\n\t\t\t\t\timplies\n\t\t\t\t\trControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)\n\t\t\t\t)\n\t\t\t)\n\t\t\tor\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\trControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)\n\t\t\t\t\timplies\n\t\t\t\t\trControllerA.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Child\' and hasTargetJavaAlgoController = algoControllerA)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\trControllerA.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Child\' and hasTargetJavaAlgoController = algoControllerA)\n\t\t\t\t\timplies\n\t\t\t\t\trControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)\n\t\t\t\t)\n\t\t\t)\n\t\t))' algoControllerAddsGetHypermediaLinkToParentRController='\n\t\tself.hasJavaAlgoController->forAll(algoControllerA |\n\t\tself.hasJavaRController->forAll(rControllerA |\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\trControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Parent\' and hasTargetJavaRController = rControllerA)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Parent\' and hasTargetJavaRController = rControllerA)\n\t\t\t\t\timplies\n\t\t\t\t\trControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)\n\t\t\t\t)\n\t\t\t)\n\t\t\tor\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\trControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Parent\' and hasTargetJavaRController = rControllerA)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = \'Parent\' and hasTargetJavaRController = rControllerA)\n\t\t\t\t\timplies\n\t\t\t\t\trControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)\n\t\t\t\t)\n\t\t\t)\n\t\t))' algoControllerAddsPutHypermediaLinkToParentRController='\n\t\tself.hasJavaAlgoController->forAll(algoControllerA |\n\t\tself.hasJavaRController->forAll(rControllerA |\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\trControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = \'Parent\' and hasTargetJavaRController = rControllerA)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = \'Parent\' and hasTargetJavaRController = rControllerA)\n\t\t\t\t\timplies\n\t\t\t\t\trControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)\n\t\t\t\t)\n\t\t\t)\n\t\t\tor\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\trControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = \'Parent\' and hasTargetJavaRController = rControllerA)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = \'Parent\' and hasTargetJavaRController = rControllerA)\n\t\t\t\t\timplies\n\t\t\t\t\trControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)\n\t\t\t\t)\n\t\t\t)\n\t\t))' algoControllerAddsDeleteHypermediaLinkToParentRController='\n\t\tself.hasJavaAlgoController->forAll(algoControllerA |\n\t\tself.hasJavaRController->forAll(rControllerA |\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\trControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = \'Parent\' and hasTargetJavaRController = rControllerA)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = \'Parent\' and hasTargetJavaRController = rControllerA)\n\t\t\t\t\timplies\n\t\t\t\t\trControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)\n\t\t\t\t)\n\t\t\t)\n\t\t\tor\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\trControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = \'Parent\' and hasTargetJavaRController = rControllerA)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = \'Parent\' and hasTargetJavaRController = rControllerA)\n\t\t\t\t\timplies\n\t\t\t\t\trControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)\n\t\t\t\t)\n\t\t\t)\n\t\t))'"
 * @generated
 */
public interface ServicePSM extends EObject {
	/**
	 * Returns the value of the '<em><b>Has Java RModel</b></em>' containment reference list.
	 * The list contents are of type {@link RESTfulServicePSM.JavaResourceModel}.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Has Java RModel</em>' containment reference list isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Has Java RModel</em>' containment reference list.
	 * @see RESTfulServicePSM.RESTfulServicePSMPackage#getServicePSM_HasJavaRModel()
	 * @model containment="true"
	 * @generated
	 */
	EList<JavaResourceModel> getHasJavaRModel();

	/**
	 * Returns the value of the '<em><b>Has Java RController</b></em>' containment reference list.
	 * The list contents are of type {@link RESTfulServicePSM.JavaResourceController}.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Has Java RController</em>' containment reference list isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Has Java RController</em>' containment reference list.
	 * @see RESTfulServicePSM.RESTfulServicePSMPackage#getServicePSM_HasJavaRController()
	 * @model containment="true"
	 * @generated
	 */
	EList<JavaResourceController> getHasJavaRController();

	/**
	 * Returns the value of the '<em><b>Has Java RC Manager</b></em>' containment reference list.
	 * The list contents are of type {@link RESTfulServicePSM.JavaResourceControllerManager}.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Has Java RC Manager</em>' containment reference list isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Has Java RC Manager</em>' containment reference list.
	 * @see RESTfulServicePSM.RESTfulServicePSMPackage#getServicePSM_HasJavaRCManager()
	 * @model containment="true"
	 * @generated
	 */
	EList<JavaResourceControllerManager> getHasJavaRCManager();

	/**
	 * Returns the value of the '<em><b>Has Java RM Manager</b></em>' containment reference list.
	 * The list contents are of type {@link RESTfulServicePSM.JavaResourceModelManager}.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Has Java RM Manager</em>' containment reference list isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Has Java RM Manager</em>' containment reference list.
	 * @see RESTfulServicePSM.RESTfulServicePSMPackage#getServicePSM_HasJavaRMManager()
	 * @model containment="true"
	 * @generated
	 */
	EList<JavaResourceModelManager> getHasJavaRMManager();

	/**
	 * Returns the value of the '<em><b>Has Java Algo Model</b></em>' containment reference list.
	 * The list contents are of type {@link RESTfulServicePSM.JavaAlgoResourceModel}.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Has Java Algo Model</em>' containment reference list isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Has Java Algo Model</em>' containment reference list.
	 * @see RESTfulServicePSM.RESTfulServicePSMPackage#getServicePSM_HasJavaAlgoModel()
	 * @model containment="true"
	 * @generated
	 */
	EList<JavaAlgoResourceModel> getHasJavaAlgoModel();

	/**
	 * Returns the value of the '<em><b>Has Java Algo Controller</b></em>' containment reference list.
	 * The list contents are of type {@link RESTfulServicePSM.JavaAlgoResourceController}.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Has Java Algo Controller</em>' containment reference list isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Has Java Algo Controller</em>' containment reference list.
	 * @see RESTfulServicePSM.RESTfulServicePSMPackage#getServicePSM_HasJavaAlgoController()
	 * @model containment="true"
	 * @generated
	 */
	EList<JavaAlgoResourceController> getHasJavaAlgoController();

	/**
	 * Returns the value of the '<em><b>Has Hibernate Controller</b></em>' containment reference.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Has Hibernate Controller</em>' containment reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Has Hibernate Controller</em>' containment reference.
	 * @see #setHasHibernateController(HibernateController)
	 * @see RESTfulServicePSM.RESTfulServicePSMPackage#getServicePSM_HasHibernateController()
	 * @model containment="true" required="true"
	 * @generated
	 */
	HibernateController getHasHibernateController();

	/**
	 * Sets the value of the '{@link RESTfulServicePSM.ServicePSM#getHasHibernateController <em>Has Hibernate Controller</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Has Hibernate Controller</em>' containment reference.
	 * @see #getHasHibernateController()
	 * @generated
	 */
	void setHasHibernateController(HibernateController value);

	/**
	 * Returns the value of the '<em><b>Name</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Name</em>' attribute isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Name</em>' attribute.
	 * @see #setName(String)
	 * @see RESTfulServicePSM.RESTfulServicePSMPackage#getServicePSM_Name()
	 * @model required="true"
	 * @generated
	 */
	String getName();

	/**
	 * Sets the value of the '{@link RESTfulServicePSM.ServicePSM#getName <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Name</em>' attribute.
	 * @see #getName()
	 * @generated
	 */
	void setName(String value);

	/**
	 * Returns the value of the '<em><b>Service Output Path</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Service Output Path</em>' attribute isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Service Output Path</em>' attribute.
	 * @see #setServiceOutputPath(String)
	 * @see RESTfulServicePSM.RESTfulServicePSMPackage#getServicePSM_ServiceOutputPath()
	 * @model required="true"
	 * @generated
	 */
	String getServiceOutputPath();

	/**
	 * Sets the value of the '{@link RESTfulServicePSM.ServicePSM#getServiceOutputPath <em>Service Output Path</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Service Output Path</em>' attribute.
	 * @see #getServiceOutputPath()
	 * @generated
	 */
	void setServiceOutputPath(String value);

	/**
	 * Returns the value of the '<em><b>Service Database IP</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Service Database IP</em>' attribute isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Service Database IP</em>' attribute.
	 * @see #setServiceDatabaseIP(String)
	 * @see RESTfulServicePSM.RESTfulServicePSMPackage#getServicePSM_ServiceDatabaseIP()
	 * @model required="true"
	 * @generated
	 */
	String getServiceDatabaseIP();

	/**
	 * Sets the value of the '{@link RESTfulServicePSM.ServicePSM#getServiceDatabaseIP <em>Service Database IP</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Service Database IP</em>' attribute.
	 * @see #getServiceDatabaseIP()
	 * @generated
	 */
	void setServiceDatabaseIP(String value);

	/**
	 * Returns the value of the '<em><b>Service Database Port</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Service Database Port</em>' attribute isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Service Database Port</em>' attribute.
	 * @see #setServiceDatabasePort(String)
	 * @see RESTfulServicePSM.RESTfulServicePSMPackage#getServicePSM_ServiceDatabasePort()
	 * @model required="true"
	 * @generated
	 */
	String getServiceDatabasePort();

	/**
	 * Sets the value of the '{@link RESTfulServicePSM.ServicePSM#getServiceDatabasePort <em>Service Database Port</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Service Database Port</em>' attribute.
	 * @see #getServiceDatabasePort()
	 * @generated
	 */
	void setServiceDatabasePort(String value);

	/**
	 * Returns the value of the '<em><b>Service Database Username</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Service Database Username</em>' attribute isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Service Database Username</em>' attribute.
	 * @see #setServiceDatabaseUsername(String)
	 * @see RESTfulServicePSM.RESTfulServicePSMPackage#getServicePSM_ServiceDatabaseUsername()
	 * @model required="true"
	 * @generated
	 */
	String getServiceDatabaseUsername();

	/**
	 * Sets the value of the '{@link RESTfulServicePSM.ServicePSM#getServiceDatabaseUsername <em>Service Database Username</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Service Database Username</em>' attribute.
	 * @see #getServiceDatabaseUsername()
	 * @generated
	 */
	void setServiceDatabaseUsername(String value);

	/**
	 * Returns the value of the '<em><b>Service Database Password</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Service Database Password</em>' attribute isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Service Database Password</em>' attribute.
	 * @see #setServiceDatabasePassword(String)
	 * @see RESTfulServicePSM.RESTfulServicePSMPackage#getServicePSM_ServiceDatabasePassword()
	 * @model required="true"
	 * @generated
	 */
	String getServiceDatabasePassword();

	/**
	 * Sets the value of the '{@link RESTfulServicePSM.ServicePSM#getServiceDatabasePassword <em>Service Database Password</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Service Database Password</em>' attribute.
	 * @see #getServiceDatabasePassword()
	 * @generated
	 */
	void setServiceDatabasePassword(String value);

	/**
	 * Returns the value of the '<em><b>Service Database Type</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Service Database Type</em>' attribute isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Service Database Type</em>' attribute.
	 * @see #setServiceDatabaseType(String)
	 * @see RESTfulServicePSM.RESTfulServicePSMPackage#getServicePSM_ServiceDatabaseType()
	 * @model required="true"
	 * @generated
	 */
	String getServiceDatabaseType();

	/**
	 * Sets the value of the '{@link RESTfulServicePSM.ServicePSM#getServiceDatabaseType <em>Service Database Type</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Service Database Type</em>' attribute.
	 * @see #getServiceDatabaseType()
	 * @generated
	 */
	void setServiceDatabaseType(String value);

} // ServicePSM
